@* add a model binding so that we can pass the mealProfiles list to this page for easy reference. *@

@model MealProfiler.Models.ProfileListViewModel


@* the compiler gave me advice to use 'Component.DataAnnotation, but then wouldn't take it, so I used the one I used for the MealProfile, and I think its working. *@


@using System.ComponentModel.DataAnnotations;
@using MealProfiler.Models;
@using MealProfiler.Data;




@{
  ViewBag.Title = "Meal Profiler";  // you can set the ViewBag here without using the at symbol, since all the code is in the at symbol block
                                    //  If you set a ViewBag in the controller, you need to use the at symbol before refeening it.
                                    // if you bind the return value in the controller, yo ucan just reference its properties by using
                                    // and at symbol.Property

  ViewBag.ShowBackBar = true;



  

}


@if (TempData["Message"] != null)
{
    <div class="alert alert-success alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @TempData["Message"]
    </div>
}



<h3 class="p-3 mb-5">@ViewBag.Title Single Meal Results</h3>
<table class="table table-striped table-dark">

    <thead>
        <tr class="bg-danger">
            <th>Goal</th>
            <th>Cost</th>
            <th>Prep Time</th>
            <th class="">Author</th>
            <th class="">Id</th>
            <th>Actions</th>
            <th>&nbsp;</th>
        </tr>
    </thead>


    @* we are working with single MealProfile objects at a time here in the Model of List<MealProfile> objects. *@
    @for (var meal = 0; meal < Model.Profiles.Count; meal++)
    {
      

        <tr>
            <!-- Meal.MealType cast of int MealGoal will return the name of the Meal Goal. -->
            <td>@((Meal.MealType)Model.Profiles[meal].MealGoal)</td>
            <td>@Model.Profiles[meal].MealCost</td>
            <td>@Model.Profiles[meal].PrepTime</td>
            <td class="">@Model.Profiles[meal].MealAuthor</td>
            <td>@Model.Profiles[meal].ProfileId</td>
            <td>
                @Html.ActionLink("Detail", "ProfileDetail", new { id = Model.Profiles[meal].ProfileId })
                | @Html.ActionLink("Edit", "ProfileEdit", new { id = Model.Profiles[meal].ProfileId })
                | <a data-toggle="modal" href="@("#deleteProfileModal" + meal)">Delete</a>
                <div class="modal fade bg-dark" id="@("deleteProfileModal" + meal)" tabindex="-1" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            @using (Html.BeginForm("DeleteProfile", "Profile"))
                            {
                                <input type="hidden" value="@Model.Profiles[meal].ProfileId" name="ProfileId" />
                                <div class="modal-header bg-danger">
                                   
                                    <h4 class="modal-title">Delete @Model.Profiles[meal].MealAuthor ?</h4>
                                </div>
                                <div class="modal-body bg-dark">
                                    Are you sure you want to delete @Model.Profiles[meal].MealAuthor?
                                </div>
                                <div class="modal-footer bg-danger">
                                    <button type="submit" class="btn bg-light btn-lg mb-3 p-3">Yes</button>
                                    <button type="button" class="btn bg-info btn-lg mb-3 p-3" data-dismiss="modal">Cancel</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </td>
        </tr>
    }
    
</table>


